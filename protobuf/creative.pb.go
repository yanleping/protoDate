// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: creative.proto

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		creative.proto

	It has these top-level messages:
		Creative
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Creative struct {
	Url             string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	VideoLength     int32   `protobuf:"varint,2,opt,name=videoLength,proto3" json:"videoLength,omitempty"`
	VideoSize       int32   `protobuf:"varint,3,opt,name=videoSize,proto3" json:"videoSize,omitempty"`
	VideoResolution string  `protobuf:"bytes,4,opt,name=videoResolution,proto3" json:"videoResolution,omitempty"`
	Width           int32   `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height          int32   `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	WatchMile       int32   `protobuf:"varint,7,opt,name=watchMile,proto3" json:"watchMile,omitempty"`
	BitRate         int32   `protobuf:"varint,8,opt,name=bitRate,proto3" json:"bitRate,omitempty"`
	IValue          int32   `protobuf:"varint,9,opt,name=iValue,proto3" json:"iValue,omitempty"`
	SValue          string  `protobuf:"bytes,10,opt,name=sValue,proto3" json:"sValue,omitempty"`
	FValue          float64 `protobuf:"fixed64,11,opt,name=fValue,proto3" json:"fValue,omitempty"`
	Resolution      string  `protobuf:"bytes,12,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Mime            string  `protobuf:"bytes,13,opt,name=mime,proto3" json:"mime,omitempty"`
	AdvCreativeId   string  `protobuf:"bytes,14,opt,name=advCreativeId,proto3" json:"advCreativeId,omitempty"`
	CreativeId      int64   `protobuf:"varint,15,opt,name=creativeId,proto3" json:"creativeId,omitempty"`
	FMd5            string  `protobuf:"bytes,16,opt,name=fMd5,proto3" json:"fMd5,omitempty"`
	Source          int32   `protobuf:"varint,17,opt,name=source,proto3" json:"source,omitempty"`
	Orientation     int32   `protobuf:"varint,18,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Protocal        int32   `protobuf:"varint,19,opt,name=protocal,proto3" json:"protocal,omitempty"`
}

func (m *Creative) Reset()                    { *m = Creative{} }
func (m *Creative) String() string            { return proto.CompactTextString(m) }
func (*Creative) ProtoMessage()               {}
func (*Creative) Descriptor() ([]byte, []int) { return fileDescriptorCreative, []int{0} }

func (m *Creative) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Creative) GetVideoLength() int32 {
	if m != nil {
		return m.VideoLength
	}
	return 0
}

func (m *Creative) GetVideoSize() int32 {
	if m != nil {
		return m.VideoSize
	}
	return 0
}

func (m *Creative) GetVideoResolution() string {
	if m != nil {
		return m.VideoResolution
	}
	return ""
}

func (m *Creative) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Creative) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Creative) GetWatchMile() int32 {
	if m != nil {
		return m.WatchMile
	}
	return 0
}

func (m *Creative) GetBitRate() int32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *Creative) GetIValue() int32 {
	if m != nil {
		return m.IValue
	}
	return 0
}

func (m *Creative) GetSValue() string {
	if m != nil {
		return m.SValue
	}
	return ""
}

func (m *Creative) GetFValue() float64 {
	if m != nil {
		return m.FValue
	}
	return 0
}

func (m *Creative) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *Creative) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *Creative) GetAdvCreativeId() string {
	if m != nil {
		return m.AdvCreativeId
	}
	return ""
}

func (m *Creative) GetCreativeId() int64 {
	if m != nil {
		return m.CreativeId
	}
	return 0
}

func (m *Creative) GetFMd5() string {
	if m != nil {
		return m.FMd5
	}
	return ""
}

func (m *Creative) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *Creative) GetOrientation() int32 {
	if m != nil {
		return m.Orientation
	}
	return 0
}

func (m *Creative) GetProtocal() int32 {
	if m != nil {
		return m.Protocal
	}
	return 0
}

func init() {
	proto.RegisterType((*Creative)(nil), "protobuf.Creative")
}
func (m *Creative) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Creative) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.VideoLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.VideoLength))
	}
	if m.VideoSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.VideoSize))
	}
	if len(m.VideoResolution) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.VideoResolution)))
		i += copy(dAtA[i:], m.VideoResolution)
	}
	if m.Width != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.Height))
	}
	if m.WatchMile != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.WatchMile))
	}
	if m.BitRate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.BitRate))
	}
	if m.IValue != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.IValue))
	}
	if len(m.SValue) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.SValue)))
		i += copy(dAtA[i:], m.SValue)
	}
	if m.FValue != 0 {
		dAtA[i] = 0x59
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FValue))))
		i += 8
	}
	if len(m.Resolution) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.Resolution)))
		i += copy(dAtA[i:], m.Resolution)
	}
	if len(m.Mime) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.Mime)))
		i += copy(dAtA[i:], m.Mime)
	}
	if len(m.AdvCreativeId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.AdvCreativeId)))
		i += copy(dAtA[i:], m.AdvCreativeId)
	}
	if m.CreativeId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.CreativeId))
	}
	if len(m.FMd5) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCreative(dAtA, i, uint64(len(m.FMd5)))
		i += copy(dAtA[i:], m.FMd5)
	}
	if m.Source != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.Source))
	}
	if m.Orientation != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.Orientation))
	}
	if m.Protocal != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCreative(dAtA, i, uint64(m.Protocal))
	}
	return i, nil
}

func encodeVarintCreative(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Creative) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	if m.VideoLength != 0 {
		n += 1 + sovCreative(uint64(m.VideoLength))
	}
	if m.VideoSize != 0 {
		n += 1 + sovCreative(uint64(m.VideoSize))
	}
	l = len(m.VideoResolution)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovCreative(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovCreative(uint64(m.Height))
	}
	if m.WatchMile != 0 {
		n += 1 + sovCreative(uint64(m.WatchMile))
	}
	if m.BitRate != 0 {
		n += 1 + sovCreative(uint64(m.BitRate))
	}
	if m.IValue != 0 {
		n += 1 + sovCreative(uint64(m.IValue))
	}
	l = len(m.SValue)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	if m.FValue != 0 {
		n += 9
	}
	l = len(m.Resolution)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	l = len(m.Mime)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	l = len(m.AdvCreativeId)
	if l > 0 {
		n += 1 + l + sovCreative(uint64(l))
	}
	if m.CreativeId != 0 {
		n += 1 + sovCreative(uint64(m.CreativeId))
	}
	l = len(m.FMd5)
	if l > 0 {
		n += 2 + l + sovCreative(uint64(l))
	}
	if m.Source != 0 {
		n += 2 + sovCreative(uint64(m.Source))
	}
	if m.Orientation != 0 {
		n += 2 + sovCreative(uint64(m.Orientation))
	}
	if m.Protocal != 0 {
		n += 2 + sovCreative(uint64(m.Protocal))
	}
	return n
}

func sovCreative(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCreative(x uint64) (n int) {
	return sovCreative(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Creative) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreative
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Creative: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Creative: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoLength", wireType)
			}
			m.VideoLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSize", wireType)
			}
			m.VideoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoResolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoResolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchMile", wireType)
			}
			m.WatchMile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchMile |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IValue", wireType)
			}
			m.IValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FValue = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvCreativeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvCreativeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeId", wireType)
			}
			m.CreativeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreative
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orientation", wireType)
			}
			m.Orientation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Orientation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocal", wireType)
			}
			m.Protocal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCreative(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCreative
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCreative(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCreative
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreative
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCreative
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCreative
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCreative(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCreative = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCreative   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("creative.proto", fileDescriptorCreative) }

var fileDescriptorCreative = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4d, 0x4e, 0xf3, 0x30,
	0x10, 0x86, 0x3f, 0x7f, 0xfd, 0x9f, 0xd2, 0x1f, 0x06, 0x84, 0x46, 0x08, 0x45, 0x11, 0x62, 0x91,
	0x15, 0x1b, 0xc4, 0x05, 0x60, 0x85, 0x44, 0x37, 0x41, 0x62, 0xef, 0x26, 0x6e, 0x63, 0x29, 0xad,
	0x51, 0xea, 0xb4, 0x12, 0x27, 0xe9, 0x91, 0x58, 0x72, 0x04, 0x54, 0x2e, 0x82, 0x3c, 0x4e, 0xdb,
	0xc0, 0xaa, 0x7e, 0x9e, 0xb7, 0x79, 0x3d, 0x8e, 0x03, 0xc3, 0xa4, 0x50, 0xd2, 0xea, 0xb5, 0xba,
	0x7d, 0x2b, 0x8c, 0x35, 0xd8, 0xe5, 0x9f, 0x69, 0x39, 0xbb, 0xde, 0x36, 0xa1, 0xfb, 0x58, 0x85,
	0x38, 0x86, 0x46, 0x59, 0xe4, 0x24, 0x42, 0x11, 0xf5, 0x62, 0xb7, 0xc4, 0x10, 0xfa, 0x6b, 0x9d,
	0x2a, 0xf3, 0xac, 0x96, 0x73, 0x9b, 0xd1, 0xff, 0x50, 0x44, 0xad, 0xb8, 0xae, 0xf0, 0x0a, 0x7a,
	0x8c, 0x2f, 0xfa, 0x5d, 0x51, 0x83, 0xf3, 0xa3, 0xc0, 0x08, 0x46, 0x0c, 0xb1, 0x5a, 0x99, 0xbc,
	0xb4, 0xda, 0x2c, 0xa9, 0xc9, 0xed, 0x7f, 0x35, 0x9e, 0x43, 0x6b, 0xa3, 0x53, 0x9b, 0x51, 0x8b,
	0x3b, 0x3c, 0xe0, 0x05, 0xb4, 0x33, 0xa5, 0xe7, 0x99, 0xa5, 0x36, 0xeb, 0x8a, 0xdc, 0xae, 0x1b,
	0x69, 0x93, 0x6c, 0xa2, 0x73, 0x45, 0x1d, 0xbf, 0xeb, 0x41, 0x20, 0x41, 0x67, 0xaa, 0x6d, 0x2c,
	0xad, 0xa2, 0x2e, 0x67, 0x7b, 0x74, 0x7d, 0xfa, 0x55, 0xe6, 0xa5, 0xa2, 0x9e, 0xef, 0xf3, 0xe4,
	0xfc, 0xca, 0x7b, 0xe0, 0xf1, 0x2a, 0x72, 0x7e, 0xe6, 0x7d, 0x3f, 0x14, 0x91, 0x88, 0x2b, 0xc2,
	0x00, 0xa0, 0x38, 0x1e, 0xe9, 0x84, 0x9f, 0xa9, 0x19, 0x44, 0x68, 0x2e, 0xf4, 0x42, 0xd1, 0x80,
	0x13, 0x5e, 0xe3, 0x0d, 0x0c, 0x64, 0xba, 0xde, 0xbf, 0xec, 0xa7, 0x94, 0x86, 0x1c, 0xfe, 0x96,
	0xae, 0x39, 0x39, 0xfe, 0x65, 0x14, 0x8a, 0xa8, 0x11, 0xd7, 0x8c, 0x6b, 0x9e, 0x4d, 0xd2, 0x7b,
	0x1a, 0xfb, 0x66, 0xb7, 0xe6, 0xe9, 0x4d, 0x59, 0x24, 0x8a, 0x4e, 0xfd, 0xa9, 0x3c, 0xb9, 0xdb,
	0x33, 0x85, 0x56, 0x4b, 0x2b, 0x79, 0x4c, 0xf4, 0xb7, 0x57, 0x53, 0x78, 0x09, 0xfe, 0x53, 0x48,
	0x64, 0x4e, 0x67, 0x1c, 0x1f, 0xf8, 0x61, 0xfc, 0xb1, 0x0b, 0xc4, 0xe7, 0x2e, 0x10, 0x5f, 0xbb,
	0x40, 0x6c, 0xbf, 0x83, 0x7f, 0xd3, 0x36, 0x67, 0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0x25, 0xc6, 0x1b, 0x4f, 0x02, 0x00, 0x00,
}
